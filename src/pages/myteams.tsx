import { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import jwt from "jsonwebtoken";
import { trpc } from "../utils/trpc";
import BuildToJson from "./buildtojson";
import Pokecompteam from "../components/pokecompteam";

const KEY = 'azertyuiopqsdfghjklmwxcvbn';

const Myteams: NextPage = () => {

  const [username, setUsername] = useState('');
  const [privateTeams, setPrivateTeams] = useState<any[]>([]);
  const [privateTitles, setPrivateTitles] = useState<any[]>([]);
  const [privateTiers, setPrivateTiers] = useState<any[]>([]);
  const [privateisPublics, setPrivateisPublics] = useState<any[]>([]);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      const decodedToken = jwt.verify(token, KEY);
      if (typeof decodedToken !== 'string') {
        const username = decodedToken.username.charAt(0).toUpperCase() + decodedToken.username.slice(1);
        setUsername(username);
      }
    }
  }, []);

  const gptMutation = trpc.signup.getPrivateTeams.useMutation();

  useEffect(() => {
    const fetchPrivateTeams = async () => {
      const result = await gptMutation.mutateAsync({ author: username });
      if (result) {
        const alltitle = Object.values(result).map(team => team.title);
        const alltier = Object.values(result).map(team => team.tier);
        const allispublic = Object.values(result).map(team => team.isPublic);
        const modifiedResult = Object.fromEntries(
          Object.entries(result).map(([key, value]) => [key, JSON.parse(value.paste)])
          
        );
        setPrivateTeams(modifiedResult ? Object.values(modifiedResult) : []);
        setPrivateTitles(alltitle ? Object.values(alltitle) : []);
        setPrivateTiers(alltier ? Object.values(alltier) : []);
        setPrivateisPublics(allispublic ? Object.values(allispublic) : []);
      }
    };
    if (username) {
      fetchPrivateTeams();
    }
  }, [username]);

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <main className="flex flex-col text-neutral-500">
          <div className="flex flex-col w-[100%]">
          <div id="myteams" className="flex items-center justify-center w-full">{username}'s teams</div>
            <div className="flex flex-wrap w-[100%]">
              {privateTeams.length > 0 ?
                privateTeams.map((team, index) => (
                  <div key={index} id="miniteam" className="flex flex-col w-1/4 border-neutral-500 border-solid border-[2px] rounded m-2">
                    <div className="flex w-[100%]">
                      <div id="teaminfoz" className="w-1/2 flex items-center justify-center border-neutral-500 border-solid border-[2px]">{privateTitles[index]}</div>
                      <div id="teaminfoz" className="w-1/4 flex items-center justify-center border-neutral-500 border-solid border-[2px]">{privateTiers[index]}</div>
                      <div id="teaminfoz" className="w-1/4 flex items-center justify-center border-neutral-500 border-solid border-[2px]">{privateisPublics[index] ? 'Public' : 'Private'}</div>
                    </div>
                    <div className="flex w-[100%]">
                      <Pokecompteam json={BuildToJson(team)} number={1} />
                      <Pokecompteam json={BuildToJson(team)} number={2} />
                      <Pokecompteam json={BuildToJson(team)} number={3} />
                    </div>
                    <div className="flex w-[100%]">
                      <Pokecompteam json={BuildToJson(team)} number={4} />
                      <Pokecompteam json={BuildToJson(team)} number={5} />
                      <Pokecompteam json={BuildToJson(team)} number={6} />
                    </div>
                  </div>
                ))
                .reduce((result: any[], element: any, index: number) => {
                  if (index % 3 === 0) {
                    result.push([]);
                  }
                  result[result.length - 1].push(element);
                  return result;
                }, [])
                .map((teamGroup, index) => (
                  <div key={index} id="3-teams" className="flex items-center justify-center w-[100%] m-2">
                    {teamGroup}
                  </div>
                ))
              :
                <div>You don't have any team.</div>
              }
            </div>
          </div>
        </main>
    </>
  );
};

export default Myteams;
